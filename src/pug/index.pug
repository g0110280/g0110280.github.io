head
  link(href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet")

style(lang="scss").
  * {
    font-family: 'Open Sans', sans-serif;
  }

  .hexagon {
    display: inline-block;
    margin: 3px;
    position: absolute;
    z-index: 3;
    background-color: black;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0 25%);
    width: calc(104px * 1.2);
    height: calc(120px * 1.2);
  }

  @keyframes glowing {
    0%   {
      opacity: 0;
    }
    50%  {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  .hexagon#center {
    cursor: pointer;
    z-index: 4;
    content: '';
    display: inline-block;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0 25%);
    width: calc(104px * 1.2);
    height: calc(120px * 1.2);
    background-color: cyan;
    transition: all 1s;
  }

  .glowing {
    animation-name: glowing;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-out;
  }

  .hexagon#center.fade-out {
    background-color: black;
  }

  body {
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    background-color: black;
    color: cyan;
  }

  #hexagons_wrapper {
    width: 100%;
    height: 100%;
    transform: translateX(50vw) translateY(50vh);
    position: relative;
  }

  @keyframes expand {
    0%   {
      width: 104px;
      height: 120px;
    }
    100% {
      width: 2080px;
      height: 2400px;
    }
  }

  .animator {
    z-index: 1;
  }

  .animator:before, .animator:after {
    top: 0;
    left: 0;
    position: absolute;
    content: '';
    display: inline-block;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0 25%);
    width: calc(104px * .9);
    height: calc(120px * .9);
    background-color: cyan;
    transform: translateX(-50%) translateY(-50%);
    animation-name: expand;
    animation-duration: 5s;
    /*animation-iteration-count: infinite;*/
    /*animation-timing-function: ease-in-out;*/
  }
  .animator:before {
    background-color: cyan;
  }

  .animator:after {
    background-color: black;
    animation-delay: .15s;
  }

  @keyframes expand-fade {
    0%   {
      width: 100px;
      height: 100px;
    }
    100% {
      width: 2500px;
      height: 2500px;
    }
  }

  .animator-fade {
    z-index: 1;
  }

  .animator-fade:before {
    top: 0;
    left: 0;
    position: absolute;
    content: '';
    display: inline-block;
    width: 104px;
    height: 120px;
    clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0 25%);
    background: radial-gradient(black 50%, cyan 70%, black);
    transform: translateX(-50%) translateY(-50%);
    animation-name: expand-fade;
    animation-duration: 4s;
    /*animation-iteration-count: infinite;*/
    /*animation-timing-function: ease-in-out;*/
    /*border-radius: 100%;*/
  }
  .text-center {
    text-align: center;
  }

  #content_wrapper {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
  }
  @keyframes typing {
    0%   {
      width: 0;
      color: cyan;
    }
    100% {
      width: 100%;
      color: cyan;
    }
  }
  .typing {
    width: 10px;
    color: transparent;
    overflow: hidden;
    white-space: nowrap;
    display: inline-block;
    animation-name: typing;
    animation-duration: .5s;
    animation-timing-function: linear;
    animation-fill-mode: forwards;
    position: relative;
  }
  .typing:after {
    position: absolute;
    right: 0;
    margin-left: 20px;
    content: '';
    display: inline-block;
    background-color: cyan;
    width: 10px;
    height: 100%;
    animation-name: glowing;
    animation-duration: 1s;
    animation-iteration-count: infinite;
    animation-iteration-count: 4;
    animation-fill-mode: forwards;
  }
  h1 {
    height: 40px;
    animation-delay: 2s;
    margin: 0;
  }

  h2 {
    /*opacity: 0;*/
    animation-delay: 4s;
  }
  .typing_wrapper {
    display: inline-block;
    position: relative;
    white-space: nowrap;
    text-align: center;
    transition: all 1s;
  }
  .typing_wrapper > * {
    width: 10px;
    color: transparent;
    overflow: hidden;
    white-space: nowrap;
    display: inline-block;
    animation-name: typing;
    animation-duration: 1s;
    animation-timing-function: linear;
    animation-fill-mode: forwards;
    position: relative;
  }
  .typing_wrapper:after {
    /*position: absolute;
    top: 0;
    right: 0;*/
    /*margin-left: 20px;*/
    content: '';
    display: inline-block;
    background-color: cyan;
    width: 10px;
    height: 30px;
    animation-name: glowing;
    animation-duration: 1s;
    /*animation-iteration-count: infinite;*/
    animation-iteration-count: 4;
    animation-fill-mode: forwards;
  }
  .typing_wrapper.shifted {
    margin-bottom: 30px;
  }

  ul#navbar {
    display: flex;
    justify-content: space-between;
    width: 400px;
    margin: 30px auto 0;
    list-style: none;
    padding: 0;
    position: absolute;
    top: 50vh;
    opacity: 0;
    transition: all 1s;
  }

  ul#navbar.show {
    top: calc(50vh + 40px);
    opacity: 1;
  }

  ul#navbar li a {
    font-size: 24px;
    font-weight: 300;
    color: white;
    text-decoration: none;
  }

  .hide {
    display: none !important;
  }

body
  #hexagons_wrapper
    #hexagon.hexagon.hide

  #content_wrapper.hide
    .typing_wrapper
      h1 I'm Stream, welcome!
    ul#navbar.hide
      li: a(href="#") Works
      li: a(href="#") Blogs
      li: a(href="#") Github

  script(src="https://code.jquery.com/jquery-3.3.1.min.js")
  script.
    $(document).ready(function () {
      renderHexagons(function () {
        animateHive(function () {
          showMainContent(function () {
            $('h1').closest('.typing_wrapper').addClass('shifted');
            $('ul#navbar').removeClass('hide');
            setTimeout(function () {
              $('ul#navbar').addClass('show');
            }, 10);
          });
        })
      });
    });

    function showMainContent(callback) {
      $('#content_wrapper').removeClass('hide');
      setTimeout(function () {
        callback();
      }, 5000);
    }

    function animateHive(callback) {
      $('#hexagons_wrapper').append($('<div>').addClass('animator-fade'));
      $('.hexagon#center').addClass('fade-out').removeClass('glowing');

      setTimeout(function () {
        $('#hexagons_wrapper').addClass('hide');
        callback();
      }, 2000);
    }

    function renderHexagons(callback) {
      var template = $('#hexagon').clone().removeAttr('id').removeClass('hide');

      var width = $('#hexagon').width() || (104 * 1.2);
      var height = $('#hexagon').height() || (120 * 1.2);

      // calculate needed hexagons count in both axis
      var xAxisLength = Math.ceil($(window).width() / width) + 1;
      var yAxisLength = Math.ceil($(window).height() / 2 / height * 2);

      // render the centered one
      $('#hexagons_wrapper').append(
        template.clone()
          .attr('data-x', 0)
          .attr('data-y', 0)
          .attr('id', 'center')
          .addClass('glowing')
          .click(callback)
      );

      // render the rest hexagons
      for (var j = 0; j <= yAxisLength; j++) {
        for (var i = 0; i <= xAxisLength; i++) {
          if (i === 0 && j === 0) {
            continue;
          }
          $('#hexagons_wrapper').append(template.clone().attr('data-x', i).attr('data-y', j));
          $('#hexagons_wrapper').append(template.clone().attr('data-x', -i).attr('data-y', j));
        }
        for (var i = 0; i <= xAxisLength; i++) {
          if (i === 0 && j === 0) {
            continue;
          }
          $('#hexagons_wrapper').append(template.clone().attr('data-x', i).attr('data-y', -j));
          $('#hexagons_wrapper').append(template.clone().attr('data-x', -i).attr('data-y', -j));
        }
      }

      // set position for all hexagons
      $('.hexagon').each(function (index, hexagon) {
        var xShiftDistance = $(hexagon).outerWidth(true) * $(hexagon).data('x') - $(hexagon).outerWidth(true) / 2;
        var yShiftDistance = $(hexagon).outerHeight(true) * $(hexagon).data('y') - $(hexagon).outerHeight(true) / 2;
        if ($(hexagon).data('y') % 2) {
          xShiftDistance += $(hexagon).outerWidth(true) / 2
        }
        if ($(hexagon).data('y') !== '0') {
          yShiftDistance -= ($(hexagon).outerHeight(true) / 4 * $(hexagon).data('y'))
        }
        $(hexagon)
          .css('top', yShiftDistance)
          .css('left', xShiftDistance);
      });
    }
